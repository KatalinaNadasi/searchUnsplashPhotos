{"version":3,"sources":["api/unsplash.js","SearchBar.js","ImageCard.js","ImageList.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","Authorization","SearchBar","onSearchSubmit","inputSearch","useRef","onSubmit","event","preventDefault","current","value","style","textAlign","margin","placeholder","ref","padding","borderRadius","border","backgroundColor","color","fontSize","fontWeight","ImageCard","image","imgHeight","useState","span","setSpan","setSpans","height","clientHeight","spans","Math","ceil","useEffect","addEventListener","gridRowEnd","src","urls","regular","alt","alt_description","key","id","width","Imagelist","images","map","App","setImages","loaded","setLoaded","term","a","unsplash","get","params","query","response","data","results","console","log","display","gridTemplateColumns","gridGap","gridAutoRows","ImageList","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSAGeA,E,OAAAA,EAAMC,OAAO,CACxBC,QAAS,2BACTC,QAAS,CACPC,cAAe,gFCmDNC,MAtDf,YAAsC,IAAlBC,EAAiB,EAAjBA,eAEZC,EAAcC,mBAkCpB,OACE,oCACE,0BAAMC,SAlCO,SAACC,GAChBA,EAAMC,iBACNL,EAAeC,EAAYK,QAAQC,QAgCPC,MA7BZ,CAChBC,UAAW,SACXC,OAAQ,SA4BJ,oEACA,+DACA,yBAAKF,MA3BU,CACnBE,OAAQ,SA2BF,2BACEC,YAAY,mBACZC,IAAKX,EACLO,MA3BS,CACjBK,QAAS,gBACTH,OAAQ,SACRI,aAAc,MACdC,OAAQ,yBAyBF,4BAAQP,MAtBI,CAClBK,QAAS,gBACTH,OAAQ,cACRI,aAAc,MACdE,gBAAiB,UACjBC,MAAO,QACPC,SAAU,SACVC,WAAY,OACZJ,OAAQ,oBAcF,cCZKK,EAlCG,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACbC,EAAYpB,mBADa,EAEPqB,mBAAS,GAFF,mBAExBC,EAFwB,KAElBC,EAFkB,KAIzBC,EAAW,WACf,IAAMC,EAASL,EAAUhB,QAAQsB,aAC3BC,EAAQC,KAAKC,KAAKJ,EAAS,IACjCF,EAAQI,IAOV,OAJAG,qBAAU,WACRV,EAAUhB,QAAQ2B,iBAAiB,OAAQP,MAI3C,oCACE,yBAAKlB,MAAO,CAAE0B,WAAW,QAAD,OAAUV,KAChC,yBACEW,IAAKd,EAAMe,KAAKC,QAChBC,IAAKjB,EAAMkB,gBACXC,IAAKnB,EAAMoB,GACXjC,MAAO,CAAEkC,MAAO,QAASR,WAAY,UACrCtB,IAAKU,OCLAqB,EAhBG,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEnB,OACE,oCACIA,EAAOC,KAAI,SAACxB,GAAD,OACT,kBAAC,EAAD,CAAWA,MAAOA,SCsCbyB,MAzCf,WAAgB,IAAD,EAEevB,mBAAS,IAFxB,mBAENqB,EAFM,KAEEG,EAFF,OAGcxB,oBAAS,GAHvB,mBAGNyB,EAHM,KAGEC,EAHF,KAKPjD,EAAc,uCAAG,WAAOkD,GAAP,eAAAC,EAAA,sEACEC,EAASC,IAAI,iBAAkB,CAClDC,OAAQ,CAAEC,MAAOL,KAFA,OACfM,EADe,OAIrBT,EAAUS,EAASC,KAAKC,SACxBT,GAAU,GALW,2CAAH,sDAuBpB,OADFU,QAAQC,IAAIhB,GAER,yBAAKpC,MAhBc,CACnBC,UAAW,SACXQ,MAAO,QACPE,WAAY,SAcV,kBAAC,EAAD,CAAWnB,eAAgBA,IACzB,yBAAKQ,MAZY,CACnBqD,QAAS,OACTC,oBAAqB,wCACrBpB,MAAO,SACPhC,OAAQ,YACRqD,QAAS,QACTC,aAAc,SAOR,kBAACC,EAAD,CAAWrB,OAAQA,MAGtBA,EAAOsB,QAAUlB,GAAU,uEC9BhBmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.de33322f.chunk.js","sourcesContent":["import axios from 'axios';\n\n\nexport default axios.create({\n    baseURL: 'https://api.unsplash.com',\n    headers: {\n      Authorization: \"Client-ID e2fc86765a55ad6d0fe05afe3f3d1704f8df154a61a16cfef1ff385e184b69a1\",\n    }\n});\n","import React, { useRef } from 'react';\nimport './App.css';\n\nfunction SearchBar({onSearchSubmit}) {\n\n  const inputSearch = useRef()\n\n  const onSubmit = (event) => {\n    event.preventDefault()\n    onSearchSubmit(inputSearch.current.value)\n  }\n\n  const formStyle = {\n    textAlign: 'center',\n    margin: '2rem',\n  }\n\n  const WrapperStyle = {\n    margin: '1rem',\n  }\n\n  const inputStyle = {\n    padding: '0.7rem 0.3rem',\n    margin: '1rem 0',\n    borderRadius: '3px',\n    border: '1px solid lightgray',\n  }\n\n  const buttonStyle = {\n    padding: '0.7rem 1.5rem',\n    margin: '1rem 0.5rem',\n    borderRadius: '3px',\n    backgroundColor: 'crimson',\n    color: 'white',\n    fontSize: '0.8rem',\n    fontWeight: 'bold',\n    border: '1px solid white',\n  }\n\n  return (\n    <>\n      <form onSubmit={onSubmit} style={formStyle}>\n        <h1>Search 10 first images from Unsplash</h1>\n        <h2>(and build an inspiring mosaic)</h2>\n        <div style={WrapperStyle}>\n          <input\n            placeholder=\"Enter a key word\"\n            ref={inputSearch}\n            style={inputStyle}\n            />\n          <button style={buttonStyle}>Submit</button>\n        </div>\n      </form>\n    </>\n  );\n}\n\nexport default SearchBar;\n","import React, { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst ImageCard = ({ image }) => {\n  const imgHeight = useRef()\n  const [span, setSpan] = useState(0)\n\n  const setSpans = () => {\n    const height = imgHeight.current.clientHeight;\n    const spans = Math.ceil(height / 10);\n    setSpan(spans)\n  }\n\n  useEffect(() => {\n    imgHeight.current.addEventListener('load', setSpans);\n  })\n\n  return (\n    <>\n      <div style={{ gridRowEnd: `span ${span}` }}>\n        <img\n          src={image.urls.regular}\n          alt={image.alt_description}\n          key={image.id}\n          style={{ width: '250px', gridRowEnd: 'span 2' }}\n          ref={imgHeight}\n          />\n      </div>\n    </>\n  )\n}\n\nImageCard.propTypes = {\n  images: PropTypes.arrayOf,\n}\n\n\nexport default ImageCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImageCard from './ImageCard';\n\n\nconst Imagelist = ({ images }) => {\n\n  return (\n    <>\n      { images.map((image) =>\n          <ImageCard image={image} />\n      )}\n    </>\n  )\n}\n\nImagelist.propTypes = {\n  images: PropTypes.arrayOf,\n}\n\n\nexport default Imagelist;\n","import React, {useState} from 'react';\nimport './App.css';\nimport unsplash from './api/unsplash';\nimport SearchBar from './SearchBar';\nimport ImageList from './ImageList';\n\n\nfunction App() {\n\n  const [images, setImages] = useState([])\n  const [loaded, setLoaded]= useState(false)\n\n  const onSearchSubmit = async (term) => {\n    const response = await unsplash.get('/search/photos', {\n        params: { query: term },\n    });\n    setImages(response.data.results)\n    setLoaded(true)\n  }\n\n  const wrapperStyle = {\n    textAlign: 'center',\n    color: 'white',\n    fontWeight: 'bold',\n  }\n\n  const containerStyle = {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(auto-fill, minmax(250px, 1fr))',\n      width: '1270px',\n      margin: '3rem auto',\n      gridGap: '0 5px',\n      gridAutoRows: '10px',\n  }\nconsole.log(images)\n  return (\n    <div style={wrapperStyle}>\n      <SearchBar onSearchSubmit={onSearchSubmit} />\n        <div style={containerStyle }>\n            <ImageList images={images} />\n        </div>\n      {\n        !images.length && loaded && <h1>There are no images with this keyword</h1>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}